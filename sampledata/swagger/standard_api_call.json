{
  "swagger": "2.0",
  "info": {
    "title": "Belong BBTI API",
    "version": "1.0",
    "contact": {
      "name": "Belong BBTI Support",
      "url": "https://github.com/belong-inc/bbti-api-docs"
    },
    "license": {
      "name": "Apache License 2.0",
      "url": "https://github.com/belong-inc/bbti-api-docs/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "BBTIService"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/bbti/v1/delivery/register": {
      "post": {
        "summary": "RegisterDelivery registers delivery information.",
        "operationId": "BBTIService_RegisterDelivery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/belongapigwv1RegisterDeliveryResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "RegisterDeliveryRequest is request of delivery API.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/belongapigwv1RegisterDeliveryRequest"
            }
          }
        ],
        "tags": [
          "BBTIService"
        ]
      }
    },
    "/bbti/v1/pricing/codes": {
      "post": {
        "summary": "PriceByAppCodes calculate grade and price based on app code.\nThe app code is consist of sku, device condition and some other metadata.",
        "operationId": "BBTIService_PriceByAppCodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/belongapigwv1PriceByAppCodesResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "PriceByAppCodesRequest is request having client's contractual id and device information in consistent code format.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/belongapigwv1PriceByAppCodesRequest"
            }
          }
        ],
        "tags": [
          "BBTIService"
        ]
      }
    },
    "/bbti/v1/pricing/products": {
      "post": {
        "summary": "PriceProducts expects to receive products details, grade them, and finally calculate price.",
        "operationId": "BBTIService_PriceProducts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/belongapigwv1PriceProductsResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "PriceProductsRequest is request of pricing/products API.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/belongapigwv1PriceProductsRequest"
            }
          }
        ],
        "tags": [
          "BBTIService"
        ]
      }
    },
    "/bbti/v1/transactions/{transactionId}/event": {
      "post": {
        "summary": "ReceiveEventNotification receive notifications of user actions on transaction.",
        "operationId": "BBTIService_ReceiveEventNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/belongapigwv1ReceiveEventNotificationResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "transactionId",
            "description": "transaction_id is a unique id in BBTI to track a transaction and products.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "$ref": "#/definitions/v1BBTIEvent",
                  "description": "event is a notification of user actions on transaction."
                }
              },
              "description": "ReceiveEventNotificationRequest is a request to notify event for a transaction."
            }
          }
        ],
        "tags": [
          "BBTIService"
        ]
      }
    },
    "/bbti/v1/user-kyc": {
      "post": {
        "summary": "CreateUserAndKyc registers BBTI user detail in user db of Belong, and also apply kyc.",
        "operationId": "BBTIService_CreateUserAndKyc",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/belongapigwv1CreateUserAndKycResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "CreateUserAndKycRequest is a payload of user-kyc API to register user information and start eKYC process.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/belongapigwv1CreateUserAndKycRequest"
            }
          }
        ],
        "tags": [
          "BBTIService"
        ]
      }
    }
  },
  "definitions": {
    "belongapigwv1CreateUserAndKycRequest": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string",
          "description": "transaction_id is used to determine which transaction should be associated with the user."
        },
        "user_id_in_partner": {
          "type": "string",
          "description": "user_id_in_partner is an optional field where the user id in the partner side."
        },
        "user_kyc_payload": {
          "$ref": "#/definitions/v1UserKycPayload",
          "description": "user_kyc_payload is detail of user."
        },
        "redirect_url": {
          "type": "string",
          "description": "redirect_url is an optional field that defined by client side to redirect after kyc completion.\nIf the query parameter of the redirect url contains the string `APPID`, it will be replaced by unique ID issued by KYC."
        },
        "submission_id": {
          "type": "string",
          "description": "submission_id is an optional field that can track the transaction by API caller."
        }
      },
      "description": "CreateUserAndKycRequest is a payload of user-kyc API to register user information and start eKYC process."
    },
    "belongapigwv1CreateUserAndKycResponse": {
      "type": "object",
      "properties": {
        "txn_id": {
          "type": "string",
          "description": "txn_id is the transaction id sent in the request."
        },
        "url": {
          "type": "string",
          "description": "url is an URL for eKYC registration. Detail will be filled by users."
        }
      },
      "description": "CreateUserAndKycResponse is a response of user-kyc API."
    },
    "belongapigwv1PriceByAppCodesRequest": {
      "type": "object",
      "properties": {
        "program_id": {
          "type": "string",
          "title": "program_id is and id given to client to categorize the request"
        },
        "device_app_codes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DeviceAppCode"
          }
        },
        "store_id": {
          "type": "integer",
          "format": "int64",
          "description": "store_id is BBTI unique ID representing the purchase store."
        },
        "submission_id": {
          "type": "string",
          "description": "submission_id is an optional field that can track the transaction by API caller."
        }
      },
      "description": "PriceByAppCodesRequest is request having client's contractual id and device information in consistent code format."
    },
    "belongapigwv1PriceByAppCodesResponse": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string",
          "description": "transaction_id is an id in BBTI to track a transaction."
        },
        "device_tracking_id": {
          "type": "string",
          "description": "device_tracking_id is an id to group up devices."
        },
        "device_grade_price": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/belongapigwv1ProductGradePrice"
          },
          "description": "device_grade_price is a list of product grade and price."
        }
      },
      "description": "PriceByAppCodesResponse is response of grading, pricing and creation of devices on BBTI."
    },
    "belongapigwv1PriceProductsRequest": {
      "type": "object",
      "properties": {
        "program_id": {
          "type": "string",
          "description": "program_id is an id provided for partner program."
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/belongapigwv1PriceProductsRequestProduct"
          },
          "description": "products is a list of products that client wants to price."
        },
        "store_id": {
          "type": "integer",
          "format": "int64",
          "description": "store_id is an optional field, which is an id of the location where BBTI is applied."
        },
        "submission_id": {
          "type": "string",
          "description": "submission_id is an optional field that can track the transaction by API caller."
        }
      },
      "description": "PriceProductsRequest is request of pricing/products API."
    },
    "belongapigwv1PriceProductsRequestProduct": {
      "type": "object",
      "properties": {
        "client_ref_id": {
          "type": "string",
          "description": "client_ref_id is an field that is an id of a product defined in the client side."
        },
        "model_key": {
          "type": "string",
          "description": "model_key is an field that is used for specifying sku."
        },
        "carrier_key": {
          "type": "string",
          "description": "carrier_key is an optional field that is used for specifying sku."
        },
        "storage_key": {
          "type": "string",
          "description": "storage_key is an field that is used for specifying sku. It is optional for earphone."
        },
        "memory_key": {
          "type": "string",
          "description": "memory_key is an field that is used for specifying sku. It is optional for smartphone and earphone."
        },
        "simlock_key": {
          "type": "string",
          "description": "simlock_key is an optional field that is used for specifying sku."
        },
        "serial_number": {
          "type": "string",
          "description": "serial_number is an optional field that is unique id given for each device.\nex. IMEI is used for mobile phones."
        },
        "condition": {
          "$ref": "#/definitions/v1ProductCondition",
          "description": "condition is condition of the product."
        }
      }
    },
    "belongapigwv1PriceProductsResponse": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string",
          "description": "transaction_id is a unique id in BBTI to track a transaction and products."
        },
        "product_grade_price": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/belongapigwv1ProductGradePrice"
          },
          "description": "product_grade_price is a list of product grade and price."
        }
      },
      "description": "PriceProductsResponse is response of pricing/products API."
    },
    "belongapigwv1ProductGradePrice": {
      "type": "object",
      "properties": {
        "reference_id": {
          "type": "string",
          "description": "reference_id is an id provided by the client to track a device in the client side."
        },
        "model": {
          "$ref": "#/definitions/belongcatalogv1Model",
          "description": "model contains the model alias and the formal name of the device."
        },
        "storage": {
          "$ref": "#/definitions/catalogv1Storage",
          "description": "storage contains the storage alias and the formal name of the storage."
        },
        "memory": {
          "$ref": "#/definitions/catalogv1Memory",
          "description": "memory contains memory information including alias, formal name and capacity in MB."
        },
        "grade": {
          "$ref": "#/definitions/belongproductresourcesv1Grade",
          "description": "grade is the calculated grade based on the condition of the product."
        },
        "price": {
          "type": "string",
          "description": "price is string to handle float without unexpected diff."
        }
      },
      "description": "ProductGradePrice is a list of product grade and price."
    },
    "belongapigwv1ReceiveEventNotificationResponse": {
      "type": "object",
      "description": "ReceiveEventNotificationResponse has nothing in the successful request."
    },
    "belongapigwv1RegisterDeliveryRequest": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string",
          "description": "transaction_id is an id in BBTI to track a transaction."
        },
        "delivery_pattern": {
          "$ref": "#/definitions/v1DeliveryPattern",
          "description": "delivery_pattern is types of delivery."
        },
        "last_name": {
          "type": "string",
          "description": "last_name is the users last name / family name."
        },
        "first_name": {
          "type": "string",
          "description": "first_name is the users first name / given name."
        },
        "last_name_kana": {
          "type": "string",
          "description": "last_name_kana is the katakana spelling of last name."
        },
        "first_name_kana": {
          "type": "string",
          "description": "first_name_kana is the katakana spelling of first name."
        },
        "zip_code": {
          "type": "string",
          "description": "zip is zipcode in format without hyphen."
        },
        "state": {
          "type": "string",
          "description": "state is Prefecture in Japan."
        },
        "city": {
          "type": "string",
          "description": "city is Ku level."
        },
        "address": {
          "type": "string",
          "description": "address is the part of the address that follows the prefecture and city information."
        },
        "building": {
          "type": "string",
          "description": "building is optional field that is used for specifying building name and room number."
        },
        "phone_number": {
          "type": "string",
          "description": "phone_number is phone number in format without hyphen."
        },
        "pickup_date": {
          "$ref": "#/definitions/typeDate",
          "description": "pickup_date is the date for pickup.\nThis is only used when delivery_pattern is pickup."
        },
        "pickup_time": {
          "$ref": "#/definitions/v1PickupTime",
          "description": "pickup_time is the time frame for pickup.\nThis is only used when delivery_pattern is pickup."
        }
      },
      "description": "RegisterDeliveryRequest is request of delivery API."
    },
    "belongapigwv1RegisterDeliveryResponse": {
      "type": "object",
      "properties": {
        "tracking_number": {
          "type": "string",
          "description": "tracking_number is optional fields that is used for tracking the delivery."
        },
        "qr_code": {
          "type": "string",
          "description": "qr_code is used by the delivery provider to issue an invoice and tracking number when the user chooses to bring.\nThis field returns the image/png data converted into a base64 string."
        },
        "barcode": {
          "type": "string",
          "description": "barcode is used by the delivery provider to issue an invoice and tracking number when the user chooses to bring.\nBasically, QRCode is used, but some convenience stores require barcode.\nThis field returns the image/png data converted into a base64 string."
        },
        "reservation_id": {
          "type": "string",
          "description": "reservation_id like the reservation_pw, is used to refer to the slip information during exceptions such as when the QR code cannot be read."
        },
        "reservation_pw": {
          "type": "string",
          "description": "reservation_pw like the reservation_id, is used to refer to the slip information during exceptions such as when the QR code cannot be read."
        }
      },
      "description": "RegisterDeliveryResponse is response of delivery API."
    },
    "belongcatalogv1Model": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is normalized name."
        },
        "value": {
          "type": "string",
          "description": "value is formal name."
        }
      },
      "description": "Model represents device model."
    },
    "belongproductresourcesv1Grade": {
      "type": "string",
      "enum": [
        "GRADE_UNSPECIFIED",
        "GRADE_S",
        "GRADE_A",
        "GRADE_B",
        "GRADE_C",
        "GRADE_D"
      ],
      "default": "GRADE_UNSPECIFIED"
    },
    "belongproductv1Condition": {
      "type": "string",
      "enum": [
        "CONDITION_UNSPECIFIED",
        "CONDITION_PASS",
        "CONDITION_FAIL"
      ],
      "default": "CONDITION_UNSPECIFIED"
    },
    "catalogv1Memory": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is normalized name of memory."
        },
        "value": {
          "type": "string",
          "description": "value is formal name of memory."
        },
        "value_mb": {
          "type": "integer",
          "format": "int64",
          "description": "value_mb is volume of memory."
        }
      },
      "description": "Memory is memory size of device."
    },
    "catalogv1Storage": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is normalized name of storage."
        },
        "value": {
          "type": "string",
          "description": "value is formal name of storage."
        }
      },
      "description": "Storage is storage size of device."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "typeDate": {
      "type": "object",
      "properties": {
        "year": {
          "type": "integer",
          "format": "int32",
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without\na year."
        },
        "month": {
          "type": "integer",
          "format": "int32",
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a\nmonth and day."
        },
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0\nto specify a year by itself or a year and month where the day isn't\nsignificant."
        }
      },
      "description": "* A full date, with non-zero year, month, and day values\n* A month and day value, with a zero year, such as an anniversary\n* A year on its own, with zero month and day values\n* A year and month value, with a zero day, such as a credit card expiration\ndate\n\nRelated types are [google.type.TimeOfDay][google.type.TimeOfDay] and\n`google.protobuf.Timestamp`."
    },
    "v1BBTIEvent": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1BBTIEventType"
        },
        "action": {
          "type": "string"
        }
      },
      "description": "BBTIEvent is an payload of event for BBTI."
    },
    "v1BBTIEventType": {
      "type": "string",
      "enum": [
        "BBTI_EVENT_TYPE_UNSPECIFIED",
        "BBTI_EVENT_TYPE_KYC",
        "BBTI_EVENT_TYPE_DELIVERY"
      ],
      "default": "BBTI_EVENT_TYPE_UNSPECIFIED",
      "description": "BBTIEventType is types of BBTI transactions event."
    },
    "v1DeliveryPattern": {
      "type": "string",
      "enum": [
        "DELIVERY_PATTERN_UNSPECIFIED",
        "DELIVERY_PATTERN_PICKUP",
        "DELIVERY_PATTERN_BRING"
      ],
      "default": "DELIVERY_PATTERN_UNSPECIFIED",
      "description": "DeliveryPattern is types of delivery."
    },
    "v1DeviceAppCode": {
      "type": "object",
      "properties": {
        "client_ref_id": {
          "type": "string",
          "description": "client_ref_id is an optional field that is used as id defined by API client."
        },
        "app_code": {
          "type": "string",
          "description": "app_code contains version, sku, device condition, and others. used to define the grade and calculate the price."
        }
      },
      "description": "DeviceAppCode contains device id in the client side and device information code."
    },
    "v1PickupTime": {
      "type": "string",
      "enum": [
        "PICKUP_TIME_UNSPECIFIED",
        "PICKUP_TIME_ALL_DAY",
        "PICKUP_TIME_TO_13",
        "PICKUP_TIME_14_TO_16",
        "PICKUP_TIME_16_TO_18",
        "PICKUP_TIME_17_TO_1830"
      ],
      "default": "PICKUP_TIME_UNSPECIFIED",
      "description": "PickupTime is types of the time frame for pickup.\n\n - PICKUP_TIME_ALL_DAY: PICKUP_TIME_ALL_DAY indicates that is do not specify a pick-up time and are available all day.\n - PICKUP_TIME_TO_13: PICKUP_TIME_TO_13 time range is `-13:00`.\n - PICKUP_TIME_14_TO_16: PICKUP_TIME_14_TO_16 time range is `14:00-16:00`.\n - PICKUP_TIME_16_TO_18: PICKUP_TIME_16_TO_18 time range is `16:00-18:00`.\n - PICKUP_TIME_17_TO_1830: PICKUP_TIME_17_TO_1830 time range is `17:00-18:30`."
    },
    "v1ProductCondition": {
      "type": "object",
      "properties": {
        "functionality": {
          "$ref": "#/definitions/belongproductv1Condition",
          "description": "OK if there are no functional defects such as not turning on."
        },
        "appearance": {
          "$ref": "#/definitions/belongproductv1Condition",
          "description": "OK if there are no appearance defects such as a cracked screen."
        }
      },
      "description": "ProductCondition is condition of a product based on the inspection.\nNot all fields are used by the product. It depends on the product type."
    },
    "v1UserKycPayload": {
      "type": "object",
      "properties": {
        "last_name": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name_kana": {
          "type": "string"
        },
        "first_name_kana": {
          "type": "string"
        },
        "date_of_birth": {
          "$ref": "#/definitions/typeDate"
        },
        "zip": {
          "type": "string",
          "title": "zip is zipcode"
        },
        "state": {
          "type": "string",
          "title": "state is Prefecture in Japan"
        },
        "city": {
          "type": "string",
          "title": "city is Ku level"
        },
        "address": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "occupation": {
          "type": "string"
        }
      },
      "description": "UserKycPayload includes all information which are required to register user, and perform KYC."
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "description": "Authentication token generated by auth service is expected as `Bearer: AUTH_TOKEN` format.",
      "name": "Authentication",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "externalDocs": {
    "description": "bbti-api-docs",
    "url": "https://github.com/belong-inc/bbti-api-docs"
  }
}